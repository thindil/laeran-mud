~name{biblioteka room,room library,room lib,ROOM}
~keywords{admin}
~desc{

Biblioteka room jest dziedziczona przez wszystkie "pokoje". To oznacza
nie tylko pokoje w tradycyjnym sensie, ale również przenośne,
użytkowników, npc, ciała, itd. Ogólnie rzecz biorąc, kiedy tworzysz
nowy pokój, jednakże nie musisz tworzyć nowego pliku LPC dla tego
pokoju (w odróżnieniu od większości MUDów), używasz w tym celu systemu
OnLine Creation (OLC) albo/i ręcznej edycji pliku zone[numer].unq.

Jeżeli jednak chcesz stworzyć nowy rodzaj pokoju (na przykład taki
z wolno opadającym sufitem), musisz utworzyć nowy program LPC
dziedziczący z ROOM i ustawić parser UNQ aby rozpoznawał Twój nowy
typ pokoju. Wykonasz to następująco:

1) Utwórz nowy plik LPC który będzie dziedziczyć z ROOM i UNQABLE.
ROOM będzie stałą która zawiera nazwę pliku z biblioteką room,
najprawdopodobniej /usr/common/lib/room.

2) Nadpisz funkcje create(), upgraded(), destructed(), to_unq_text()
oraz from_dtd_unq(). Te funkcje powinny wyglądać następująco (pobrane
z pliku simple_room.c):

static void create(varargs int clone) \{
  room::create(clone);
  unq::create(clone);
  if(clone) \{
    bdesc = PHR("a room");
    gdesc = PHR("a room");
    ldesc = PHR("You see a room here.");
    edesc = nil;

    MAPD->add_room_object(this_object());
  \}
\}

void destructed(int clone) \{
  room::destructed(clone);
  unq::destructed(clone);
  if(clone) \{
    MAPD->remove_room_object(this_object());
  \}
\}

void upgraded(varargs int clone) \{
  room::upgraded(clone);
  unq::upgraded(clone);
\}
 
/* Prevent anyone from getting a room */
string can_get(object mover, object new_env) \{
  return "You can't move a room!";
\}
 
string to_unq_text(void) \{
  return "\~my_room\{\\n" + to_unq_flags() + "\}\\n";
\}
 
void from_dtd_unq(mixed* unq) \{
  int ctr;
 
  if(unq[0] != "my_room")
    error("Doesn't look like room data!");
 
  for (ctr = 0; ctr < sizeof(unq[1]); ctr++) \{
    from_dtd_tag(unq[1][ctr][0], unq[1][ctr][1]);
  \}
\}

Gdzie "my_room" jest nazwą Twojego pokoju -- musi być unikalna i
nie może mieć nazwy jakiegokolwiek parametru pokoju -- jak location,
bdesc, parent, itd (znaczy się, nie może zawierać żadnego typu
już zapisanego w pliku room.dtd).

3) Teraz musisz dodać definicje dtd dla Twojego pokoju do room.dtd.
Najprostszą definicją jest po prostu "\~my_room:obj\{\}". "my_room"
musi być takie samo jak "my_room" wcześniej. Jeżeli chcesz dodać
jakieś nowe parametry zapisywane przez pokój, musisz dodać je do
room.dtd również. Oczywiście musisz je również odpowiednio obsłużyć
w kodzie LPC. Zobacz do pliku simple_portable.c jako przykład jak
to może działać.

4) Następnie musisz przywiązać Twój plik LPC do dtd który właśnie
skończyłeś tworzyć. Aby to zrobić, edytuj plik room_binder.unq i
dodaj nieco unq podobnego do tego poniżej:

\~bind\{
  \~tag\{my_room\}
  \~code\{/usr/common/obj/my_room\}
\}

gdzie my_room jest nazwą tagu dtd który skończyłeś tworzyć a
/usr/commn/obj/my_room jest nazwą pliku LPC zawierającego Twój
program (bez końcówki .c).

To wszystko. Jednakże nie możesz używać systemu OLC do tworzenia
obiektów tego typu, który przed chwilą stworzyłeś. Przynajmniej 
jeszcze nie. Jeżeli chcesz, musisz zaimplementować odpowiednie

FUNKCJE:

Teraz, aby zaimplementować Twoje super możliwości do tego pokoju,
istnieje kilka funkcji w bibliotece ROOM które musisz nadpisać aby
nadać swojemu pokojowi nowe właściwości. Niektóre z tych funkcji
mówią, że powinieneś wywołać funkcje z klasy bazowej; naprawdę 
powinieneś to zrobić, dla wszystkich pochodnych funkcji z klasy
bazowej, nawet jeżeli taka funkcja nic nie robi w danym momencie.
Może za to zacząć coś robić w przyszłości.

Funkcje kontrolujące poruszanie się:

string can_enter(object enter_object, int dir)
    Wywoływana zanim ciało mobka wejdzie do pokoju. enter_object
to ciało mobka, który próbuje wejść do pokoju, dir to kierunek
z którego nadchodzi. Zwróć nil jeżeli mobile może wejść do pokoju
albo string zawierający przyczynę dla której nie może, bądź co
blokuje jego wejście.

void enter(object enter_object, int dir)
    Wywoływana kiedy ciało mobka wchodzi do pokoju. enter_object
to ciało mobka, który dopiero co wszedł, dir to kierunek z którego
nadszedł. Domyślna implementacja tej funkcji informuje wszystkie
mobki w pokoju o przybyciu nowego. Dlatego proszę wywołuj funkcję
bazową, chyba że nie chcesz informować innych obecnych w pokoju o
przybyciu nowej istoty. Przy okazji: can_enter() będzie najczęściej
wywołane przed enter() ale nie zawsze! Na przykład administrator
używający komendy @goto _nie_wywoła_ funkcji can_enter. 

string can_leave(object leave_object, int dir)
    Wywoływana zanim ciało mobka opóści pokój. leav_object to
ciało mobka, który próbuje wyjść z pokoju, dir to kierunek w 
którym próbuje wyjść. Zwróć nil jeżeli mobile może wyjść z pokoju
albo string zawierający przyczynę dla której nie może, bądź co
blokuje jego wyjście.

void leave(object leave_object, int dir)
    Wywoływana kiedy ciało mobka opuszcza pokój. leave_object to
ciało mobka, który dopiero co wyszedł, dir to kierunek w którym
wyszedł. Domyślna implementacja tej funkcji informuje wszystkie
mobki w pokoju o opuszczeniu go przez leave_object. Dlatego proszę
wywołuj funkcję bazową, chyba że nie chcesz informować innych
obecnych w pokoju o tym, że ktoś go opuścił. Przy okazji: can_leave()
będzie _najczęściej_ wywołana przed leave() ale nie zawsz! Na przykład,
administrator używający komendy @goto _nie wywoła_ funkcji can_leave.

Funkcje podnoszenia/upuszczania/itd:

string can_remove(object mover, object movee, object new_env)
    Wywoływana zanim obiekt jest brany z tego pokoju przez komendę
bądź coś podobnego. mover to obiekt, który próbuje poruszyć obiektem,
movee jest to obiekt poruszany a new_env to obiekt to pokój do
którego ten obiekt będzie poruszony. Zwróć string z przyczyną dlaczego
obiekt nie może być usunięty albo nil aby zezwolić na przeniesienie
obiektu. Przy okazji: new_env zawsze będzie rodzicem albo potomkiem
obecnego pokoju a movee będzie zawsze potomkiem obecnego pokoju,
jednakże mover nie musi mieć jakichkolwiek relacji z pokojem.

void remove(object mover, object movee, object new_env)
    Wywoływana kiedy obiekt jest wzięty z tego pokoju przy pomocy komendy
bądź czegoś podobnego. mover to obiekt który porusza wybranym
obiektem, movee to obiekt który będzie poruszany a new_env to pokój
do którego obiekt będzie przeniesiony. Przy okazji: new_env zawsze
będzie rodzicem bądź potomkiem obecnego pokoju a movee zawsze będzie
potomkiem pokoju, jednakże mover nie musi mieć jakichkolwiek relacji
z pokojem.

string can_put(object mover, object movee, object old_env)
    Wywoływana zanim obiekt jest włożony do tego pokoju, przy pomocy
komendy bądź czegoś podobnego. mover to obiekt który próbuje włożyć
obiekt, movee to obiekt wkładany a old_env to pokój z którego obiekt
będzie brany. Zwróć przyczynę (w postaci stringa) kiedy obiekt nie
może być włożony albo nil kiedy obiekt może być przeniesiony. Przy
okazji: old_env zawsze będzie rodzicem bądź potomkiem obecnego pokoju
a movee zawsze będzie potomkiem old_env, jednakże mover nie musi mieć
jakichkolwiek relacji z pokojem.

string put(object mover, object movee, object old_env)
    Wywyływana kiedy obiekt jest wkładany do pokoju przy pomocy
komendy bądź czegoś podobnego. mover to obiekt który wkłada rzecz,
movee to wkładana rzecz a old_env to pokój z którego obiekt jest
wkładany. Przy okazji: old_env będzie zawsze rodzicem bądź potomkiem
obecnego pokoju a movee zawsze potomkiem old_env, jednakże movee
nie musi mieć jakichkolwiek relacji z pokojem.

string can_get(object mover, object new_env)
    Wywoływana kiedy ktoś próbuje wziąć ten obiekt przy pomocy
komendy lub czegoś podobnego. mover to obiekt który próbuje
poruszyć obiektem a new_env to pokój do którego ten obiekt będzie
włożony. Zwróć przyczynę (w postaci stringa) dlaczego ten obiekt
nie może być poruszony albo nil aby zezwolić na ruch. Przy okazji:
Domyślnie ta funkcja sprawdza czy obiekt nie jest detalem i zabrania
poruszenia jego jeżeli jest. Dlatego staraj się zawsze wywoływać
funckję bazową.

void get(object mover, object new_env)
    Wywoływana kiedy ktoś porusza tym obiektem przy pomocy komendy
bądź czegoś podobnego. mover to obiekt który porusza obiektem a
new_env to pokój do którego ten obiekt jest przenoszony.
}

~name{mobile library,mobile lib,MOBILE,mob lib,mob library}
~keywords{admin}
~desc{

Mobki to kod LPC który służy do kontrolowania obiektów oraz NPC'ków.
Wszystkie rozumne obiekty są mobami i wszystkie moby mają zazwyczaj
ciała. Aby stworzyć NPC'ka musisz stworzyć pochodny obiekt od MOBILE.
Nie ma dokładnego przepisu jak to zrobić, musisz nieco poeksperymentować
i naprawdę zrozumieć jak działa Phantasmal -- będziesz musiał zmodyfikować
parę innych plików również. Jeżeli nadal chcesz to zrobić, sprawdź
plik user_mobile.c jako przykład jak można stworzyć moba bazującego
na bibliotece MOBILE (user_mobile.c jest mobilnym obiektem dla
gracza).

Kiedy NPC działa, musisz stworzyć parę funkcji do ich kontroli.

void say(string msg)
    Mówi msg do wszystkim w obecnym pokoju.

void emote(string msg)
    Wykonuje jakąś emotkę, która jest pokazywana dla wszystkich
w obecnym pokoju.

int whisper(object to, string str)
    Szepcze "str" do "to. "to" musi być ciałem mobka w tym samym
pokoju. Kiedy coś jest szepnięte, tylko osoba do której szeptano
będzie mogła zobaczyć co powiedziałeś, jednakże wszyscy w tym samym
pokoju zobaczą że coś zostało szepnięte. Zwróć 1 jeżeli szept został
zakończony sukcesem, 0 w przypadku błędu.

int ask(object to, string str)
    Zapytaj "to" o "str". "to" musi być ciałem mobka w tym samym
pokoju. "to" może być nil, w tym wypadku pytanie będzie zadane
do wszystkich w pokoju. Mimo że pytanie może być skierowane do jednej
osoby, wszyscy obecni je zauważą.

string place(object obj, object to)
    Porusza obiekt "obj" z obecnego miejsca do "to". Oba obiekty
muszą być potomkami Twojej lokacji. Zwraca string z informacją
dlaczego nie udało się przenieść obiektu bądź nil jeżeli wszystko
było w porządku.

string move(int dir)
    Porusza mobkiem w kierunku "dir". Jeżeli ruch był udany,
funkcja zwraca nil, w przeciwnym wypadku, zwraca przyczynę dlaczego
nie udało się poruszyć.

string teleport(object loc, int force)
    Teleportuje obiekt do pokoju "loc". Jeżeli force jest ustawiona 
na 1, teleport zawsze się uda. Przy okazji: force zawsze będzie 
uprzywilejowane jak i cała funkcja może być uprzywilejowana, jest to
bardzo niebezpieczna fukcja z dużą możliwością nadużyć.

Poniżej znajdują się funkcje, które pozwalają Tobie odpowiadać na
zdarzenia w Twoim NPC'ku:

void hook_say(object body, string message)
    Ktoś w obecnym pokoju powiedział coś. body to ciało osoby
która powiedziała coś a message to to co powiedziała.

void hook_whisper(object body, string message)
    Ktoś w obecnym pokoju szepnął coś do tego mobka. body to ciało
osoby, która szeptała a message to co zostało szepnięte.

void hook_whisper_other(object body, object target)
    Ktoś w obecnym pokoju szepnął coś do kogoś innego. body to osoba,
która szeptała, target to ciało osoby do której szeptano.

void hook_ask(mixed *args)
    Ktoś w obecnym pokoju spytał o coś. arg[0] to ciało osoby która
pyta, args[1] to o co zapytała.

void hook_ask_other(mixed *args)
    Ktoś w obecnym pokoju zapytał kogoś w tym pokoju o coś. args[0]
to ciało osoby która pyta, args[1] to ciało osoby pytanej (może być
nil dla pytania do wszystkich) a args[2] to o co zostało spytane.

void hook_leave(object body, int dir)
    Ktoś dopiero co opuścił ten pokój. body to ciało osoby która
odeszła, dir to kierunek w którym odeszła.

void hook_enter(object body, int dir)
    Ktoś dopiero co wszedł do tego pokoju. body to ciało osoby
która weszła, dir to kierunek z którego nadeszła.

}
