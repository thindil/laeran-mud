~name{bebechy}
~keywords{admin}
~desc{

Jest pewna liczba komend, które pozwalają działać z programami
LPC. Jedna uwaga, w LPC "program" jest tym samy co "źródłowy plik
LPC", pojedynczy plik LPC to /usr/System/obj/wiztool.c lub
/usr/common/lib/intl_phrase.c.

Komendy i tematy pomocy:

%history         Pokazuje Twoją historię komend code/clone/compile
%clear           Czyści Twoją historię komend code/clone/compile

%clone           Klonuje wybrany obiekt
%destruct        Niszczy wybrany obiekt
%compile         Kompiluje wybrany obiekt

%od_report       Informacje na temat obiektu LPC
%list_dest       Lista usuniętych obiektów LPC
%full_rebuild    Rekompiluje wszystkie obiekty

%code            Komenda code uruchamia jakiś kod DGD
cd               Komendy związane z plikami, jak w systemie
%ed              Edytor tekstowy DGD.

%access          Pokazuje uprawnienia administracyjne
%rsrc            Pokazuje użycie zasobów
%quota           Pokazuje użycie zasobów i udziałów

%grant           Przydziela uprawnienia administracyjne
%ungrant         Usuwa uprawnienia administracyjne

demony           Demony dostarczające różnych usług MUDa

}


~name{history,%history,historia,historia komend,historia kompilacji}
~keywords{admin}
~desc{

Komenda %history bez argumentów pokazuje historię wartości zwróconych
przez komendy %code, %compile bądź %clone. Możesz również podać argument
w postaci numeru aby zobaczyć tylko jedną wartość z historii. Większość
wartości będzie pokazanych jako obiekt niż specificzna wartość. Mogą
również odnosić się do niskopoziomowych komend MUDliba jak $0, $1, $2,
itd.

}


~name{clear,%clear,czyszczenie historii}
~keywords{admin}
~desc{

Komenda %clear czyści historię komend. Zobacz %history.

}


~name{%clone,clone,klonuj,klonuj obiekt}
~keywords{admin}
~desc{

Komenda %clone klonuje obiekt i dodaje go do Twojej historii
komend. Bądź ostrożny, inaczej możesz wywołać wycieki pamięci!
Sklonowany obiekt może być określony przez nazwę obiektu bądź
numer z historii.

Zobacz %history.

}


~name{%destruct,destruct,zniszcz obiekt}
~keywords{admin}
~desc{

Komenda %destruct niszczy obiekty podane poprzez nazwę obiektu
bądź numer z historoo. Skasowanie biblioteki i rekompilacja jej może
nie być wystarczające aby w pełni zastąpić jej kod w obiektach
potomnych.

Zobacz %history i "http://phantasmal.sf.net/DGD/Kernel/Inheritance.html".

}


~name{%compile,compile,kompiluj obiekt}
~keywords{admin}
~desc{

Komenda %compile kompiluje obiekty podane jako nazwy obiektów albo
numer z historii. Skasowanie biblioteki i rekompilacja może nie być
wystarczające aby w pełni zastąpić jej kod w obiektach potomnych,
chociaż rekompilacja klonowanego powinna zaktualizować wszystkie
klony. Jeżeli obiekt jest klonowalny, skompilowany obiekt będzie
dodany do historii komendy.

Zobacz %history, "http://phantasmal.sf.net/DGD/Kernel/Inheritance.html",
%destruct i %full_rebuild.

}


~name{%code,code,uruchamianie kodu,lpc,kod lpc,kod}
~keywords{admin}
~desc{

Komenda %code uruchomi nieco kodu LPC DGD który podasz jako argument
i zwróci rezultat. Proste przykłady:

%code 3 + 7
%code destruct_object($3)
%code (\{"bob", "sam", "fred"\}) & (\{"bob", "william"\})

Ten kod będzie uruchomiony z Twojego katalogu i dlatego będzie 
działał z Twoimi uprawnieniami. Sam obiekt będzie nazwany
/usr/Ty/_code gdzie "Ty" będzie zamienione na Twoją nazwę
postaci. Jeżeli posiadasz plik nazwany /usr/Ty/include/code.h,
zostanie on dołączony przed uruchomieniem kodu. To pozwoli Tobie
deklarować zmienne i dziedziczyć z obiektu rodzica jeżeli masz
na to ochotę.

Zobacz %history i "http://phantasmal.sf.net/DGD".

}


~name{objectd report,od_report,%od_report,raport objectd}
~keywords{admin}
~desc{

Komenda %od_report pokaże wartość objectd dla wybranego obiektu
bądź zagadnienia. Może być użyta na programach LPC, na wybranym
numerze rzeczy bądź historii (zobacz %history):

%od_report /usr/System/obj/wiztool
%od_report #47
%od_report $7

W dowolnym z tych wypadków, raport poinformuje czy obiekt jest
klonowalny czy dziedziczy, czy zgłoszenie jest usunięte, nazwę,
indeks i czas kompilacji, poprzednie zgłoszenie (jeżeli jest),
zgłoszenie rodzicielskie i pliki na których program polega
(inne niż plik z bezpośrednim kodem źródłowym).

}


~name{%list_dest,list_dest,lista usunietych,lista usuniętych}
~keywords{admin}
~desc{

Użytkownicy którzy nie debuggują objectd prawdopodonie nigdy nie
będą potrzebowali użycia komendy %list_dest. To po prostu pokazuje
obecną listę programów, których najnowsze zgłoszenia zostały
usunięte (przy pomocy komendy %destruct albo destruct_object()),

}


~name{rebuild,full_rebuild,%full_rebuild}
~keywords{admin}
~desc{

Komenda %full_rebuild przekompiluje cały kod LPC MUDa za wyjątkiem
obiektu Driver, /kernel/sys/driver.c. Ten może być rekompilowany
osobno komendą %compile jeżeli tego chcesz.

Komenda aktualizuje poprzez zniszczenie każdej biblioteki (jak przy
pomocy komendy %destruct) i ponowne przebudowanie każdej klonowalnej.

}


~name{cd,pwd,ls,cp,mv,rm,mkdir,rmdir}
~keywords{admin}
~desc{

Komendy cd, pwd, ls, cp, mv, rm, mkdir, rmdir działają jak ich
uniksowe odpowiedniki. Jeżeli nigdy nie korzystałeś z linii
poleceń w systemach uniksowych, proszę powstrzymaj się przed ich
używaniem. Mogą spowodować poważne uszkodzenia w grze i nawet nie
będziesz o tym wiedzieć. Jeżeli ich nie rozumiesz, nie używaj.

}


~name{%ed,ed,edytor}
~keywords{admin}
~desc{

DGD zawiera wbudowany edytor nazywany "ed". Możesz uruchomić go
wpisując "%ed" albo "%ed <nazwa pliku>". To może bardzo poważnie
namieszać w grze. Jeżeli nie wiesz dokładnie jak go używać, proszę
nie korzystaj na razie z niego.

}


~name{%grant,%ungrant,grant,ungrant}
~keywords{admin}
~desc{

%grant <nazwa użytkownika> access
%grant <nazwa użytkownika> <ścieżka> [read|write|full]
%grant global <ścieżka>

%ungrant <nazwa użytkownika> access
%ungrant <nazwa użytkownika> <ścieżka>
%ungrant global <ścieżka>

Użycie komendy "%grant <użytkownik> access" zmieni zwykłego gracza
w postać administratora, dając mu potężne dodatkowe moce. Nie ma
prostej, kontrolowalnej drogi aby zabezpieczyć się w tym momencie --
zdecydowanie narażasz bezpieczeństwo gry jeżeli używasz tej komendy
na osobie, której nie ufasz.

Komenda "%grant <użytkownik> <ścieżka> [r|w|f]" przyznaje wybranemu
użytkownikowi określony dostęp (odczyt, zapis albo pełny dostęp
administracyjny) do wybranej lokacji i jej podkatalogów. To jest
podstawowa wersja tego jak system pozwoleń działa w grze.

Komenda %ungrant jest przeciwieństwem komendy %grant i odpowiednia
składnia usuwa odpowiednie uprawnienia. Na przykład, "%ungrant
<użytkownik> access" usunie uprawnienia administracyjne z wybranej
postaci. Pamiętaj, że jakiś pozbawiony skrupółów użytkownik może
zrobić to samo Twojej postaci!

Bez względu na wszystko postać "admin" zawsze zachowuje pełne
uprawnienia. Jest to niezmienna cecha biblioteki Kernel.

}


~name{uprawnienia,uprawnienie}
~keywords{admin}
~desc{

Aby zobaczyć uprawnienia użytkownika, użyj komendy %access. Aby
nadać nowe uprawnienia, użyj komendy %grant. Aby usunąć obecne
uprawnienia, użyj komendy %ungrant.

}
